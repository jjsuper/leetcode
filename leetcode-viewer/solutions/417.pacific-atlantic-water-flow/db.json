{"c++":"class Solution {\r\npublic:\r\n    vector<pair<int, int>> pacificAtlantic(vector<vector<int>>& matrix) {\r\n        vector<pair<int, int>> res;\r\n        if(matrix.empty()) return res;\r\n        \r\n        queue<pair<int, int>> pacQue;\r\n        queue<pair<int, int>> atlQue;\r\n        vector<vector<bool>> pacReach;\r\n        vector<vector<bool>> atlReach;\r\n        \r\n        for(int i=0; i<matrix.size(); ++i) pacQue.push(pair<int, int>(i,0));\r\n        for(int i=0; i<matrix[0].size(); ++i) pacQue.push(pair<int, int>(0,i));\r\n        \r\n        for(int i=0; i<matrix.size(); ++i) atlQue.push(pair<int, int>(i,matrix[0].size()-1));\r\n        for(int i=0; i<matrix[0].size(); ++i) atlQue.push(pair<int, int>(matrix.size()-1, i));   \r\n        \r\n        pacReach=reach(pacQue, matrix);\r\n        atlReach=reach(atlQue, matrix);\r\n        \r\n        //print(pacReach);\r\n        //print(atlReach);\r\n        \r\n        for(int i=0; i<matrix.size(); ++i) {\r\n            for(int j=0; j<matrix[0].size(); ++j)\r\n                if(pacReach[i][j] && atlReach[i][j]) res.push_back(pair<int, int>(i,j));\r\n        }\r\n        \r\n        return res;\r\n    }\r\nprivate:\r\n    vector<vector<bool>> reach(queue<pair<int, int>>& source, vector<vector<int>>& matrix) {\r\n        vector<vector<bool>> res(matrix.size(), vector<bool>(matrix[0].size(), 0));\r\n        \r\n        vector<pair<int, int>> dir={{0,1},{0,-1},{1,0},{-1,0}};\r\n        \r\n        while(!source.empty()) {\r\n            int x=source.front().first;\r\n            int y=source.front().second;\r\n            source.pop();\r\n            res[x][y]=1;\r\n            for(auto d:dir) {\r\n                int p=x+d.first;\r\n                int q=y+d.second;\r\n                if(p<0 || p>=matrix.size()) continue;\r\n                if(q<0 || q>=matrix[0].size()) continue;\r\n                if(res[p][q]) continue;\r\n                if(matrix[p][q]>=matrix[x][y]) {\r\n                    res[p][q]=1;\r\n                    source.push(pair<int, int>(p,q));\r\n                }\r\n            }\r\n        }\r\n        \r\n        return res;\r\n    }\r\n    void print(vector<vector<bool>>& matrix) {\r\n        for(auto i:matrix) {\r\n            for(auto j:i) {\r\n                cout << (j?\"1 \":\"0 \");\r\n            }\r\n            cout << endl;\r\n        }\r\n        cout << endl;\r\n    }\r\n};"}
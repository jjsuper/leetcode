{"c++":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<string> binaryTreePaths(TreeNode* root) {\r\n        vector<string> out;\r\n        stack<pair<TreeNode*, string>> path;\r\n        \r\n\r\n        if(root==NULL) return out;\r\n        \r\n        string s;\r\n        s=to_string(root->val);\r\n        \r\n        //cout << s;\r\n        \r\n        path.push(pair<TreeNode*, string>(root,s));\r\n        \r\n        while(!path.empty())\r\n        {\r\n            pair<TreeNode*, string> ppair;\r\n            ppair=path.top();\r\n            \r\n            TreeNode* tmpNode;\r\n            string tmpstr;\r\n            tmpNode=get<0>(ppair);\r\n            tmpstr=get<1>(ppair);\r\n            \r\n            path.pop();\r\n            \r\n            \r\n            if(!tmpNode->left&&!tmpNode->right)\r\n            {\r\n                out.push_back(tmpstr);\r\n            }\r\n            \r\n            if(tmpNode->left)\r\n            {\r\n               TreeNode* tmpleft=tmpNode->left;\r\n               string tmpleftstr;\r\n               \r\n               tmpleftstr=tmpstr+\"->\"+to_string(tmpNode->left->val);\r\n               path.push(pair<TreeNode*, string>(tmpleft,tmpleftstr));\r\n            }\r\n            if(tmpNode->right)\r\n            {\r\n               TreeNode* tmpright=tmpNode->right;\r\n               string tmprightstr;\r\n               \r\n               tmprightstr=tmpstr+\"->\"+to_string(tmpNode->right->val);\r\n               path.push(pair<TreeNode*, string>(tmpright,tmprightstr));\r\n            }\r\n            \r\n        }\r\n        \r\n        \r\n        return out;\r\n    }\r\n};"}
{"c++":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<int> boundaryOfBinaryTree(TreeNode* root) {\r\n        if(root==NULL) return boundary;\r\n        boundary.push_back(root->val);\r\n        leftboundary(root->left);\r\n        leaves(root->left);\r\n        leaves(root->right);\r\n        rightboundary(root->right);\r\n        \r\n        return boundary;\r\n    }\r\nprivate:\r\n    vector<int> boundary;\r\n    \r\n    void leftboundary(TreeNode* root) {\r\n        if(root==NULL || root->left==NULL && root->right==NULL) return;\r\n        boundary.push_back(root->val);\r\n        if(root->left) leftboundary(root->left);\r\n        else leftboundary(root->right);\r\n    }\r\n    \r\n    void rightboundary(TreeNode* root) {\r\n        if(root==NULL || root->left==NULL && root->right==NULL) return;\r\n        if(root->right) rightboundary(root->right);\r\n        else rightboundary(root->left);\r\n        boundary.push_back(root->val);\r\n    }\r\n    \r\n    void leaves(TreeNode* root) {\r\n        if(root==NULL) return;\r\n        if(root->left==NULL && root->right==NULL) boundary.push_back(root->val);\r\n        leaves(root->left);\r\n        leaves(root->right);\r\n    }\r\n};"}
{"c++":"/**\r\n * Definition for binary tree\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass BSTIterator {\r\npublic:\r\n    BSTIterator(TreeNode *root) {\r\n        pushAll(root);\r\n    }\r\n\r\n    /** @return whether we have a next smallest number */\r\n    bool hasNext() {\r\n        return !myStack.empty();\r\n    }\r\n\r\n    /** @return the next smallest number */\r\n    int next() {\r\n       TreeNode *next=myStack.top();\r\n       myStack.pop();\r\n       pushAll(next->right);\r\n       return next->val;\r\n    }\r\nprivate:\r\n    stack<TreeNode *> myStack;\r\n    void pushAll(TreeNode *root)\r\n    {\r\n        while(root)\r\n        {\r\n            myStack.push(root);\r\n            root=root->left;\r\n        }\r\n    }\r\n    \r\n};\r\n\r\n/**\r\n * Your BSTIterator will be called like this:\r\n * BSTIterator i = BSTIterator(root);\r\n * while (i.hasNext()) cout << i.next();\r\n */"}
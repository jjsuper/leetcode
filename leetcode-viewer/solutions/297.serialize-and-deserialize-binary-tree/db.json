{"c++":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Codec {\r\npublic:\r\n\r\n    // Encodes a tree to a single string.\r\n    string serialize(TreeNode* root) {\r\n        ostringstream out;\r\n        serialize(root, out);\r\n        return out.str();\r\n    }\r\n\r\n    // Decodes your encoded data to tree.\r\n    TreeNode* deserialize(string data) {\r\n        istringstream in(data);\r\n        return deserialize(in);\r\n    }\r\nprivate:\r\n    void serialize(TreeNode* root, ostringstream& out) {\r\n        if(root) {\r\n            out << to_string(root->val) << \" \";\r\n            serialize(root->left, out);\r\n            serialize(root->right, out);\r\n        }\r\n        else {\r\n            out << \"#\" << \" \";\r\n        }\r\n    }\r\n    \r\n    TreeNode* deserialize(istringstream& in) {\r\n        string s;\r\n        in >> s;\r\n        if(s==\"#\") return NULL;\r\n        TreeNode* root=new TreeNode(stoi(s));\r\n        root->left=deserialize(in);\r\n        root->right=deserialize(in);\r\n        return root;\r\n    }\r\n    \r\n};\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec;\r\n// codec.deserialize(codec.serialize(root));"}
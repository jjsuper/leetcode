{"c++":"class Solution {\r\npublic:\r\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\r\n        int m=matrix.size();\r\n        int n=m? matrix[0].size(): 0;\r\n        if(m==0 || n==0) return 0;\r\n        \r\n        vector<vector<int>> dp(m, vector<int>(n, 0));\r\n        int res=0;\r\n        for(int i=0; i<m; ++i) {\r\n            for(int j=0; j<n; ++j) {\r\n                res=max(res, dfs(matrix, i, j, dp));\r\n            }\r\n        }\r\n        return res;\r\n    }\r\nprivate:\r\n    vector<pair<int, int>> dirs={{1,0}, {-1,0}, {0,1}, {0,-1}};\r\n    int dfs(vector<vector<int>>& matrix, int i, int j, vector<vector<int>>& dp) {\r\n        if(dp[i][j]) return dp[i][j];\r\n        int m=matrix.size();\r\n        int n=m? matrix[0].size(): 0;\r\n        int res=1;\r\n        \r\n        for(auto dir : dirs) {\r\n            int x=i+dir.first, y=j+dir.second;\r\n            if(x<0 || x>=m || y<0 || y>=n || matrix[i][j] >= matrix[x][y]) continue;\r\n            res=max(res, dfs(matrix, x, y, dp)+1);\r\n        }\r\n        \r\n        dp[i][j]=res;\r\n        \r\n        return dp[i][j];\r\n    }\r\n};"}
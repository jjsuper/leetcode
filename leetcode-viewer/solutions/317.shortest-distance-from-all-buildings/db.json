{"c++":"class Solution {\r\npublic:\r\n    int shortestDistance(vector<vector<int>>& grid) {\r\n        int m=grid.size();\r\n        int n=m? grid[0].size(): 0;\r\n        if(m==0 || n==0) return -1;\r\n        \r\n        int mindist=-1, walk=0;\r\n        vector<vector<int>> total(m, vector<int>(n, 0));\r\n        vector<pair<int, int>> dirs={{1,0}, {-1,0}, {0,1}, {0,-1}};\r\n        \r\n        for(int i=0; i<m; ++i) {\r\n            for(int j=0; j<n; ++j) {\r\n                if(grid[i][j]==1) {\r\n                    mindist=-1;\r\n                    queue<pair<int, int>> que;\r\n                    que.emplace(i,j);\r\n                    vector<vector<int>> dist(m, vector<int>(n, 0));\r\n                    while(!que.empty()) {\r\n                        auto it=que.front();\r\n                        int x=it.first, y=it.second;\r\n                        que.pop();\r\n                        for(auto dir: dirs) {\r\n                            int p=x+dir.first;\r\n                            int q=y+dir.second;\r\n                            if(p>-1 && p<m && q>-1 && q<n && grid[p][q]==walk) {\r\n                                que.emplace(p,q);\r\n                                grid[p][q]--;\r\n                                dist[p][q]=dist[x][y]+1;\r\n                                total[p][q]+=dist[p][q];\r\n                                if(mindist<0 || mindist>total[p][q])\r\n                                    mindist=total[p][q];\r\n                            }\r\n                        }\r\n                    }\r\n                    walk--;\r\n                }    \r\n            }\r\n        }\r\n        \r\n        return mindist;\r\n    }\r\n};"}
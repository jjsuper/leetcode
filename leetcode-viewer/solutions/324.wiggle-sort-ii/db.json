{"c++":"class Solution {\r\npublic:\r\n    void wiggleSort(vector<int>& nums) {\r\n        if(nums.size()<2) return;\r\n        int n=nums.size();\r\n        \r\n        int mid=findKthelement(nums, n/2);\r\n        \r\n        \r\n        \r\n        #define A(i) nums[(1+2*i)%(n|1)]\r\n        \r\n\r\n        // 3-way-partition-to-wiggly in O(n) time with O(1) space.\r\n        int i=0, j=0, k=n-1;\r\n        while (j <= k) {\r\n            if (A(j) > mid)\r\n                swap(A(i++), A(j++));\r\n            else if (A(j) < mid)\r\n                swap(A(j), A(k--));\r\n            else\r\n                j++;\r\n        }\r\n        \r\n    }\r\nprivate:\r\n    int findKthelement(vector<int>& nums, int k) {\r\n        int left=0, right=nums.size()-1;\r\n        \r\n        while(true) {\r\n            int pos=partition(nums, left, right);\r\n            if(k-1==pos) return nums[pos];\r\n            else if(k-1<pos) right=pos-1;\r\n            else left=pos+1;\r\n        }\r\n    }\r\n    \r\n    int partition(vector<int>& nums, int left, int right) {\r\n        int pivot=nums[left];\r\n        int l=left+1, r=right;\r\n        while(l<=r) {\r\n            if(pivot>nums[l] && pivot<nums[r]) swap(nums[l++], nums[r--]); \r\n            if(pivot<=nums[l]) l++;\r\n            if(pivot>=nums[r]) r--;\r\n        }\r\n        swap(nums[left], nums[r]);\r\n        return r;\r\n    }\r\n    \r\n};"}
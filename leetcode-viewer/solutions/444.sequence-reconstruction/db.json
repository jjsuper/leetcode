{"c++":"class Solution {\r\npublic:\r\n    bool sequenceReconstruction(vector<int>& org, vector<vector<int>>& seqs) {\r\n        if(seqs.empty()) return false;\r\n        int n=org.size();\r\n        unordered_map<int, unordered_set<int>> edges;\r\n        vector<int> degrees(n+1, 0);\r\n        int cnt=0;\r\n        \r\n        bool flag=false;\r\n        for(int i=0; i<seqs.size(); ++i) {\r\n            for(int j=0; j<seqs[i].size(); ++j) {\r\n                flag=true;\r\n                if(seqs[i][j]>n || seqs[i][j]<=0) return false;\r\n                if(j>0 && !edges[seqs[i][j-1]].count(seqs[i][j])) {\r\n                    edges[seqs[i][j-1]].insert(seqs[i][j]);\r\n                    if(degrees[seqs[i][j]]++==0) cnt++;\r\n                }\r\n            }\r\n        }\r\n        \r\n        if(!flag) return false;\r\n        if(cnt!=n-1) return false;\r\n        \r\n        for(int i=0; i<n; ++i) {\r\n            if(degrees[org[i]]>0) return false;\r\n            for(auto it : edges[org[i]]) {\r\n                if(--degrees[it]==0 && it!=org[i+1])\r\n                    return false;\r\n            }\r\n        }\r\n        \r\n        \r\n        \r\n        return true;\r\n    }\r\n};\r\n"}
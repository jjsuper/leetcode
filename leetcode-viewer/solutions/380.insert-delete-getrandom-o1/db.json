{"c++":"class RandomizedSet {\r\nprivate:\r\n    vector<int> tmp;\r\n    unordered_map<int, int> map;\r\n\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    RandomizedSet() {\r\n    }\r\n    \r\n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\r\n    bool insert(int val) {\r\n        if (map.find(val) != map.end()) return false;\r\n        tmp.emplace_back(val);\r\n        map[val] = tmp.size() - 1;          //index of val in vector tmp\r\n        return true;\r\n    }\r\n    \r\n    /** Deletes a value from the set. Returns true if the set contained the specified element. */\r\n    bool remove(int val) {\r\n        if (map.find(val) == map.end()) return false;\r\n        int indx = map[val];                //index of val in vector tmp\r\n        tmp[indx] = tmp[tmp.size() - 1];    //replace val with the last element in the vector\r\n        map[tmp[indx]] = indx;              //update the vector index (stored in hashmap) of that element \r\n        tmp.pop_back();\r\n        map.erase(map.find(val));\r\n        return true;\r\n    }\r\n    \r\n    /** Get a random element from the set. */\r\n    int getRandom() {\r\n        return tmp[rand() % tmp.size()];\r\n    }\r\n};\r\n\r\n/**\r\n * Your RandomizedSet object will be instantiated and called as such:\r\n * RandomizedSet obj = new RandomizedSet();\r\n * bool param_1 = obj.insert(val);\r\n * bool param_2 = obj.remove(val);\r\n * int param_3 = obj.getRandom();\r\n */"}
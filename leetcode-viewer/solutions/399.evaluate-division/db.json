{"c++":"class Solution {\r\npublic:\r\n    vector<double> calcEquation(vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries) {\r\n        \r\n        unordered_map<string, unordered_map<string, double>> matrix;\r\n        vector<double> res;\r\n\r\n        for(int i=0; i<equations.size(); ++i) {\r\n            matrix[equations[i].first][equations[i].first]=1.0;\r\n            matrix[equations[i].second][equations[i].second]=1.0;\r\n            matrix[equations[i].first][equations[i].second]=values[i];\r\n            matrix[equations[i].second][equations[i].first]=1/values[i];\r\n        }\r\n   \r\n   \r\n        for(auto it : queries) {\r\n            unordered_set<string> s;\r\n            double tmp=dfs(it.first, it.second, matrix, s);\r\n            if(tmp)\r\n                res.push_back(tmp);\r\n            else \r\n                res.push_back(-1.0);\r\n        }\r\n        \r\n        \r\n        return res;\r\n    }\r\nprivate:\r\n    double dfs(string start, string end, unordered_map<string, unordered_map<string, double>>& matrix, unordered_set<string>& s) {\r\n        if(matrix[start].count(end)) return matrix[start][end];\r\n        \r\n        for(auto it : matrix[start]) {\r\n            if(!s.count(it.first)) {\r\n                s.insert(it.first);\r\n                double tmp=dfs(it.first, end, matrix, s);\r\n                s.erase(it.first);\r\n                if(tmp) return tmp*it.second;\r\n            }\r\n        }\r\n        return 0.0;\r\n    }\r\n};\r\n\r\n\r\n "}
{"c++":"/**\r\n * // This is the interface that allows for creating nested lists.\r\n * // You should not implement it, or speculate about its implementation\r\n * class NestedInteger {\r\n *   public:\r\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\r\n *     bool isInteger() const;\r\n *\r\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\r\n *     // The result is undefined if this NestedInteger holds a nested list\r\n *     int getInteger() const;\r\n *\r\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\r\n *     // The result is undefined if this NestedInteger holds a single integer\r\n *     const vector<NestedInteger> &getList() const;\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int depthSum(vector<NestedInteger>& nestedList) {\r\n        return depthSum(nestedList, 1);\r\n    }\r\nprivate:\r\n    int depthSum(vector<NestedInteger>& nestedList, int depth) {\r\n        if(nestedList.empty()) return 0;\r\n        int sum=0;\r\n        \r\n        for(int i=0; i<nestedList.size(); ++i) {\r\n            if(nestedList[i].isInteger()) sum+=depth*nestedList[i].getInteger();\r\n            else {\r\n                sum+=depthSum(nestedList[i].getList(), depth+1);\r\n            }\r\n        }\r\n        \r\n        return sum;\r\n    }\r\n};"}
{"c++":"class Solution {\r\npublic:\r\n    string findShortestWay(vector<vector<int>>& maze, vector<int>& ball, vector<int>& hole) {\r\n        int dist=INT_MAX;\r\n        string res=\"\";\r\n        return findShortestWay(maze, ball, hole, vector<int>{0, 0}, 0, \"\", dist, res);\r\n    }\r\nprivate:\r\n    string findShortestWay(vector<vector<int>>& maze, vector<int> ball, vector<int>& hole, vector<int> dir, int step, string path, int& dist, string& res) {\r\n        if(step < dist) {\r\n            if(dir[0]||dir[1]) {\r\n                while(ball[0]+dir[0]>-1 && ball[0]+dir[0]<maze.size() && ball[1]+dir[1]>-1 && ball[1]+dir[1]<maze[0].size() && maze[ball[0]+dir[0]][ball[1]+dir[1]]!=1 ) {\r\n                    ball[0]+=dir[0];\r\n                    ball[1]+=dir[1];\r\n                    step++;\r\n                    if(ball[0]==hole[0] && ball[1]==hole[1] && step<dist) {\r\n                        dist=step;\r\n                        res=path;\r\n                    }\r\n                }\r\n            }\r\n            if(maze[ball[0]][ball[1]]==0 || step+2<maze[ball[0]][ball[1]]) {\r\n                maze[ball[0]][ball[1]]=step+2;\r\n                if(dir[0]==0) findShortestWay(maze, ball, hole, vector<int>{1,0}, step, path+\"d\", dist, res);\r\n                if(dir[1]==0) findShortestWay(maze, ball, hole, vector<int>{0,-1}, step, path+\"l\", dist, res);\r\n                if(dir[1]==0) findShortestWay(maze, ball, hole, vector<int>{0,1}, step, path+\"r\", dist, res);\r\n                if(dir[0]==0) findShortestWay(maze, ball, hole, vector<int>{-1,0}, step, path+\"u\", dist, res);\r\n            }\r\n        }\r\n        return dist==INT_MAX? \"impossible\": res;\r\n    }\r\n    \r\n    \r\n    \r\n};"}
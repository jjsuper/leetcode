{"c++":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Codec {\r\npublic:\r\n\r\n    // Encodes a tree to a single string.\r\n    string serialize(TreeNode* root) {\r\n        string res;\r\n        if(root==NULL) return res;\r\n        res=to_string(root->val)+','+serialize(root->left)+serialize(root->right);\r\n        return res;\r\n    }\r\n\r\n    // Decodes your encoded data to tree.\r\n    TreeNode* deserialize(string data) {\r\n        vector<int> d=getdata(data);\r\n        \r\n        return deserial(d);\r\n    }\r\nprivate:\r\n    TreeNode* deserial(vector<int> d) {\r\n        TreeNode* root;\r\n        if(d.empty()) return NULL;\r\n        root=new TreeNode(d[0]);\r\n        \r\n        int i=0;\r\n        while(i<d.size()&&d[i]<=d[0]) i++; \r\n        \r\n        root->left=deserial(vector<int>(d.begin()+1, d.begin()+i));\r\n        root->right=deserial(vector<int>(d.begin()+i, d.end()));\r\n        \r\n        return root;\r\n    }\r\n    vector<int> getdata(string data) {\r\n        vector<int> res;\r\n        int i=0;\r\n\r\n        while(i<data.size()) {\r\n            int j=i;\r\n            while(i<data.size() && data[i]!=',') i++;\r\n            res.push_back(stoi(data.substr(j,i-j)));\r\n            i++;\r\n        }\r\n        \r\n        return res;        \r\n    }\r\n    \r\n};\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec;\r\n// codec.deserialize(codec.serialize(root));"}
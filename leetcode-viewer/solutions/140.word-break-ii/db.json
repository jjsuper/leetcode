{"c++":"class Solution {\r\npublic:\r\n    vector<string> wordBreak(string s, vector<string>& wordDict) {\r\n        unordered_set<string> dict(wordDict.begin(), wordDict.end());\r\n        vector<string> res;\r\n        string cur=\"\";\r\n        \r\n        int minlen=INT_MAX, maxlen=INT_MIN;\r\n        \r\n        for(string it : dict) {\r\n            minlen=min(minlen, (int)it.size());\r\n            maxlen=max(maxlen, (int)it.size());\r\n        }\r\n        \r\n        vector<bool> dp(s.size()+1, 0);\r\n        dp[s.size()]=1;\r\n        \r\n        for(int i=s.size()-minlen; i>-1; --i) {\r\n            for(int len=minlen; len<=min(maxlen, (int)s.size()-i); ++len) {\r\n                if(dp[i+len] && dict.count(s.substr(i, len))) {\r\n                    dp[i]=1;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        \r\n        if(dp[0]) dfs(s, dict, cur, res);\r\n        return res;\r\n    }\r\nprivate:\r\n    void dfs(string s, unordered_set<string>& dict, string cur, vector<string>& res) {\r\n        if(s.empty()) res.push_back(cur.substr(0, cur.size()-1));\r\n        \r\n        for(int i=1; i<=s.size(); ++i) {\r\n            if(dict.find(s.substr(0,i))!=dict.end()) {\r\n                string scur=cur+s.substr(0,i)+\" \";\r\n                dfs(s.substr(i), dict, scur, res);\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n};"}
{"c++":"class Solution {\r\npublic:/*\r\n    vector<int> countSmaller(vector<int>& nums) {\r\n        \r\n        node* root=NULL;    \r\n        vector<int> res(nums.size(), 0);\r\n        for(int i=nums.size()-1; i>-1; i--) {\r\n            root = insert(root, nums[i], res, i, 0);\r\n        }\r\n        \r\n        return res;\r\n    }\r\nprivate:\r\n    struct node {\r\n        node* left=NULL;\r\n        node* right=NULL;\r\n        int val;\r\n        int sum;\r\n        int dup=1;\r\n        node(int x, int s) : val(x), sum(s) {}\r\n    };\r\n    \r\n    node* insert(node* root, int num, vector<int>& res, int i, int preSum) {\r\n        if(root == NULL) {\r\n            root = new node(num, 0);\r\n            res[i]=preSum;\r\n        }\r\n        else if(root->val == num) {\r\n            root->dup++;\r\n            res[i]=preSum + root->sum;\r\n        }\r\n        else if(root->val < num) {\r\n            root->right = insert(root->right, num, res, i, preSum+root->sum+root->dup);\r\n        }\r\n        else {\r\n            root->sum++;\r\n            root->left = insert(root->left, num, res, i, preSum);\r\n        }\r\n        return root;\r\n        \r\n    }   \r\n       */ \r\n    vector<int> countSmaller(vector<int>& nums) {    \r\n        vector<int> indices(nums.size(), 0);\r\n        for(int i=0; i<nums.size(); ++i) {\r\n            indices[i]=i;\r\n        }\r\n        vector<int> res(nums.size(), 0);\r\n        \r\n        mergesort(nums, indices, res, 0, nums.size());\r\n        return res;\r\n    }\r\nprivate:\r\n    void mergesort(vector<int>& nums, vector<int>& indices, vector<int>& res, int start, int end) {\r\n        if(start+1>=end) return;\r\n        \r\n        int mid=(start+end)/2;\r\n        mergesort(nums, indices, res, start, mid);\r\n        mergesort(nums, indices, res, mid, end);\r\n        \r\n        vector<int> tmp(end-start, 0);\r\n        \r\n        int rightcnt=0;\r\n        int idx1=start;\r\n        int idx2=mid;\r\n        \r\n        while(idx1<mid || idx2<end) {\r\n            if(idx2==end || (idx1<mid && nums[indices[idx1]]<=nums[indices[idx2]])) {\r\n                tmp[idx1-start+idx2-mid]=indices[idx1];\r\n                res[indices[idx1]]+=rightcnt;\r\n                idx1++;\r\n            }\r\n            else {\r\n                tmp[idx1-start+idx2-mid]=indices[idx2];\r\n                rightcnt++;\r\n                idx2++;\r\n            }\r\n        }/*\r\n        while(idx1<mid) {\r\n            tmp[idx1-start+idx2-mid]=indices[idx1];\r\n            res[indices[idx1]]+=rightcnt;\r\n            idx1++;\r\n        }\r\n        while(idx2<end) {\r\n            tmp[idx1-start+idx2-mid]=indices[idx2];\r\n            idx2++;\r\n        }\r\n*/\r\n        \r\n        for(int i=start; i<end; ++i) {\r\n            indices[i]=tmp[i-start];\r\n        }\r\n\r\n    }\r\n};"}
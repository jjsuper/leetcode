{"c++":"class Solution {\r\npublic:\r\n    vector<string> generatePalindromes(string s) {\r\n        unordered_map<char, int> cnt;\r\n        vector<string> res;\r\n        \r\n        for(int i=0; i<s.size(); ++i) cnt[s[i]]++;\r\n        \r\n        int odd=0; \r\n        string half;\r\n        char mid;\r\n        for(auto x: cnt) {\r\n            if(x.second%2==1) {\r\n                odd++;\r\n                mid=x.first;\r\n                if(odd>1) return res;\r\n            }\r\n            half.append(x.second/2, x.first);\r\n        }\r\n        \r\n        cout << half << endl;\r\n        unordered_set<string> perm;\r\n        permutation(half, vector<bool>(half.size(), 0), \"\", perm);\r\n        \r\n        for(string str: perm) {\r\n            string newstr=str;\r\n            if(odd) newstr+=mid;\r\n            reverse(str.begin(), str.end());\r\n            newstr+=str;\r\n            res.push_back(newstr);\r\n        }\r\n        return res;\r\n    }\r\nprivate:\r\n    void permutation(string s, vector<bool> used, string cur, unordered_set<string>& res) {\r\n        if(cur.size()==s.size()) {\r\n            res.insert(cur);\r\n        }\r\n        \r\n        for(int i=0; i<s.size(); ++i) {\r\n            if(i>0 && s[i]==s[i-1] && !used[i-1]) continue;\r\n            if(!used[i]) {\r\n                char tmp=s[i];\r\n                used[i]=true;\r\n                permutation(s, used, cur+tmp, res);\r\n                used[i]=false;\r\n            }\r\n        }\r\n    }\r\n};"}
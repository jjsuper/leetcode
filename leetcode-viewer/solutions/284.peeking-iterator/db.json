{"c++":"// Below is the interface for Iterator, which is already defined for you.\r\n// **DO NOT** modify the interface for Iterator.\r\nclass Iterator {\r\n    struct Data;\r\n\tData* data;\r\npublic:\r\n\tIterator(const vector<int>& nums);\r\n\tIterator(const Iterator& iter);\r\n\tvirtual ~Iterator();\r\n\t// Returns the next element in the iteration.\r\n\tint next();\r\n\t// Returns true if the iteration has more elements.\r\n\tbool hasNext() const;\r\n};\r\n\r\n\r\nclass PeekingIterator : public Iterator {\r\npublic:\r\n\tPeekingIterator(const vector<int>& nums) : Iterator(nums) {\r\n\t    // Initialize any member here.\r\n\t    // **DO NOT** save a copy of nums and manipulate it directly.\r\n\t    // You should only use the Iterator interface methods.\r\n\t    \r\n\t}\r\n\r\n    // Returns the next element in the iteration without advancing the iterator.\r\n\tint peek() {\r\n        return Iterator(*this).next();\r\n\t}\r\n\r\n\t// hasNext() and next() should behave the same as in the Iterator interface.\r\n\t// Override them if needed.\r\n\tint next() {\r\n\t    return Iterator::next();\r\n\t}\r\n\r\n\tbool hasNext() const {\r\n\t    return Iterator::hasNext();\r\n\t}\r\n};"}
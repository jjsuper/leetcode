{"c++":"/**\r\n * Definition for undirected graph.\r\n * struct UndirectedGraphNode {\r\n *     int label;\r\n *     vector<UndirectedGraphNode *> neighbors;\r\n *     UndirectedGraphNode(int x) : label(x) {};\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {\r\n        if(!node) return NULL;\r\n        if(visited.find(node->label)!=visited.end()) \r\n            return visited[node->label];\r\n        UndirectedGraphNode *ret=new UndirectedGraphNode(node->label);\r\n        visited[node->label]=ret;\r\n        for(auto neighbor: node->neighbors)\r\n            ret->neighbors.push_back(cloneGraph(neighbor));\r\n        \r\n        return ret;\r\n    }\r\nprivate:\r\n    unordered_map<int, UndirectedGraphNode*> visited;\r\n};"}
{"c++":"class Solution {\r\npublic:\r\n    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {\r\n        vector<set<int>> outbound(numCourses);\r\n        vector<int> inbound(numCourses, 0);\r\n        \r\n        for(int i=0; i<prerequisites.size(); ++i) {\r\n            outbound[prerequisites[i].second].insert(prerequisites[i].first);\r\n         //   inbound[prerequisites[i].first]++;\r\n        }\r\n        \r\n        for(int i=0; i<numCourses; ++i) {\r\n            for(auto it=outbound[i].begin(); it!=outbound[i].end(); ++it) {\r\n                inbound[*it]++;\r\n            }\r\n        }\r\n        \r\n        \r\n        queue<int> myque;\r\n        for(int i=0; i<numCourses; ++i) {\r\n            if(!inbound[i]) myque.push(i); \r\n        }\r\n        \r\n        while(!myque.empty()) {\r\n            int n=myque.front();\r\n            myque.pop();\r\n            for(auto it=outbound[n].begin(); it!=outbound[n].end(); ++it) {\r\n                int m=*it;\r\n                inbound[m]--;\r\n                if(!inbound[m]) myque.push(m);\r\n            }\r\n            numCourses--;\r\n        }\r\n        \r\n        cout << numCourses << endl;\r\n        return numCourses==0; \r\n\t    \r\n    }\r\n};"}
{"c++":"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    void reorderList(ListNode* head) {\r\n        if(head==NULL||head->next==NULL||head->next->next==NULL) return;\r\n        \r\n        //step 1 cut mid\r\n        ListNode* fast=head;\r\n        ListNode* slow=head;\r\n        \r\n        while(fast && fast->next && fast->next->next) {\r\n            slow=slow->next;\r\n            fast=fast->next->next;\r\n        }\r\n\r\n        \r\n        ListNode* mid=slow->next;\r\n        slow->next=NULL; //?\r\n           \r\n        print(head);\r\n        print(mid);     \r\n        \r\n        \r\n        \r\n        //step 2 reverse 2nd\r\n        ListNode* p1=mid, *p2, *p3;\r\n        if(p1->next) {\r\n            p2=p1;\r\n            p3=p1->next;\r\n            p2->next=NULL;\r\n            while(p3) {\r\n                p2=p3;\r\n                p3=p3->next;\r\n                p2->next=p1;\r\n                p1=p2;\r\n            }\r\n        }\r\n        \r\n        print(head);\r\n        print(p1);\r\n        \r\n        \r\n        //step 3 merge\r\n        ListNode* h1=head, *h2=p1, *t1;\r\n        \r\n        while(h2) {\r\n            t1=h1->next;\r\n            h1->next=h2;\r\n            h2=h2->next;\r\n            h1->next->next=t1;\r\n            h1=t1;\r\n        }\r\n        \r\n        print(head);\r\n        \r\n    }\r\nprivate:\r\n    void print(ListNode* head) {\r\n        while(head) {\r\n            cout << head->val << \" \";\r\n            head=head->next;\r\n        }\r\n        cout << endl;\r\n    }\r\n};"}
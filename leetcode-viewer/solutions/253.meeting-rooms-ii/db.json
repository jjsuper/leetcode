{"c++":"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n *     Interval() : start(0), end(0) {}\r\n *     Interval(int s, int e) : start(s), end(e) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int minMeetingRooms(vector<Interval>& intervals) {\r\n        if(intervals.empty()) return 0;\r\n        priority_queue<int, std::vector<int>, std::greater<int> > endtime;\r\n        sort(intervals.begin(), intervals.end(), [](Interval a, Interval b){return a.start<b.start;});\r\n        \r\n        endtime.push(intervals[0].end);\r\n        \r\n        for(int i=1; i<intervals.size(); ++i) {\r\n            if(intervals[i].start >= endtime.top()) {\r\n                endtime.pop();\r\n            }\r\n            endtime.push(intervals[i].end);\r\n        }\r\n        return endtime.size();\r\n    }\r\n};"}
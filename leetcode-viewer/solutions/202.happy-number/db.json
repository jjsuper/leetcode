{"c++":"class Solution {\r\npublic:\r\n   unordered_map<int, int> path;\r\n    bool isHappy(int n) {\r\n        //if(n==1) return true;\r\n        //if(path.find(n)!=path.end()) return false;\r\n        \r\n        int r;\r\n        int q=n;\r\n        int sum=0;\r\n        \r\n        \r\n        while(q)\r\n        {\r\n          \r\n          r=q%10;\r\n          \r\n          sum += r*r; \r\n          q=q/10;  \r\n        }\r\n        \r\n        if(sum==1) return true;\r\n        if(path.find(sum)!=path.end()) return false;\r\n        \r\n        path[n]=sum;\r\n        \r\n        return isHappy(sum);\r\n  /*    \r\n        \r\n        unordered_map<int, int> path;//I use the map to store the result of each calculation. if 19 is the key,the value is 82:1*1+9*9=82\r\n    bool isHappy(int n) {\r\n        int value=0;\r\n        int key=n;\r\n        while (n) {//calculate the value of the key.\r\n            int temp = n%10;\r\n            value+=temp*temp;\r\n            n/=10;\r\n        }\r\n        if (value==1) {//if the value is 1,the key is a happy number.\r\n            return true;\r\n        }\r\n        if (path.find(value)!=path.end()) {//if the value is already in the map,there is a cycle,so the key is not a happy number.\r\n            return false;\r\n        }\r\n        path[key]=value;//put the key/value in the map\r\n        return isHappy(value);//calculate recursively\r\n       /*/ \r\n    }\r\n};"}
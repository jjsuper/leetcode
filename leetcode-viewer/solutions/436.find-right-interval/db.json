{"c++":"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n *     Interval() : start(0), end(0) {}\r\n *     Interval(int s, int e) : start(s), end(e) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<int> findRightInterval(vector<Interval>& intervals) {\r\n        map<int, int> hash;\r\n        vector<int> res;\r\n        \r\n        for(int i=0; i<intervals.size(); ++i) hash[intervals[i].start]=i;\r\n        \r\n        for(auto in : intervals) {\r\n            auto itr=hash.lower_bound(in.end);\r\n            if(itr==hash.end()) res.push_back(-1);\r\n            else res.push_back(itr->second);\r\n        }\r\n        \r\n        return res;\r\n    }\r\n};"}
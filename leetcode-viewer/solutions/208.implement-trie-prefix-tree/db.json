{"c++":"class Trie {\r\nclass TrieNode {\r\npublic:\r\n    TrieNode* next[26];    \r\n    bool is_end=false;\r\n};\r\n\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    Trie() {\r\n        root=new TrieNode();\r\n    }\r\n    \r\n    /** Inserts a word into the trie. */\r\n    void insert(string word) {\r\n        TrieNode* p=root;\r\n        for(int i=0; i<word.size(); ++i) {\r\n            if(p->next[word[i]-'a']==NULL) {\r\n                p->next[word[i]-'a']=new TrieNode();\r\n            }\r\n            p=p->next[word[i]-'a'];\r\n        }\r\n        p->is_end=true;\r\n    }\r\n    \r\n    /** Returns if the word is in the trie. */\r\n    bool search(string word) {\r\n        TrieNode *p = root;\r\n        for(int i=0; i<word.size() && p!=NULL; ++i)\r\n            p=p->next[word[i]-'a'];\r\n        return p!=NULL && p->is_end;\r\n    }\r\n    \r\n    /** Returns if there is any word in the trie that starts with the given prefix. */\r\n    bool startsWith(string prefix) {\r\n        TrieNode *p = root;\r\n        for(int i=0; i<prefix.size() && p!=NULL; ++i)\r\n            p=p->next[prefix[i]-'a'];\r\n        return p!=NULL;\r\n    }\r\nprivate:\r\n    TrieNode* root;\r\n\r\n};\r\n\r\n/**\r\n * Your Trie object will be instantiated and called as such:\r\n * Trie obj = new Trie();\r\n * obj.insert(word);\r\n * bool param_2 = obj.search(word);\r\n * bool param_3 = obj.startsWith(prefix);\r\n */"}
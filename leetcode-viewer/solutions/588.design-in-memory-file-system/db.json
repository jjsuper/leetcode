{"c++":"class FileSystem {\r\nprivate:\r\n    struct file {\r\n        bool isFile=false;\r\n        unordered_map<string, file*> list;\r\n        string content=\"\";\r\n    };\r\n    \r\n    file* root;\r\npublic:\r\n    FileSystem() {\r\n        root=new file();\r\n    }\r\n    \r\n    vector<string> ls(string path) {\r\n        vector<string> res;\r\n        string name;\r\n        int p=0, p1=0;\r\n        file* cur=root;\r\n        while(p<path.size()) {\r\n            for(p1=p+1; p1<path.size() && path[p1]!='/'; ++p1);\r\n            name=path.substr(p+1, p1-p-1);\r\n            if(!name.empty()) {\r\n                if(cur->list.count(name)) {\r\n                    cur=cur->list[name];\r\n                }\r\n                else {\r\n                    return res;\r\n                }\r\n            }\r\n            p=p1;\r\n        }\r\n        if(cur->isFile) \r\n            res.push_back(name);\r\n        else \r\n            for(auto it : cur->list) \r\n                res.push_back(it.first);\r\n        \r\n        sort(res.begin(), res.end());\r\n        return res;\r\n    }\r\n    \r\n    void mkdir(string path) {\r\n        int p=0, p1=0;\r\n        file* cur=root;\r\n        while(p<path.size()) {\r\n            for(p1=p+1; p1<path.size() && path[p1]!='/'; ++p1);\r\n            string name=path.substr(p+1, p1-p-1);\r\n            if(!name.empty()) {\r\n                if(!cur->list.count(name)) {\r\n                    file* newfile = new file();\r\n                    cur->list[name]=newfile;\r\n                }\r\n                cur=cur->list[name];\r\n            }\r\n            p=p1;\r\n        }\r\n    }\r\n    \r\n    void addContentToFile(string filePath, string content) {\r\n        int p=0, p1=0;\r\n        file* cur=root;\r\n        while(p<filePath.size()) {\r\n            for(p1=p+1; p1<filePath.size() && filePath[p1]!='/'; ++p1);\r\n            string name=filePath.substr(p+1, p1-p-1);\r\n            if(!name.empty()) {\r\n                if(!cur->list.count(name)) {\r\n                    file* newfile = new file();\r\n                    cur->list[name]=newfile;\r\n                }\r\n                cur=cur->list[name];\r\n            }\r\n            p=p1;\r\n        }\r\n        cur->isFile=true;\r\n        cur->content+=content;\r\n    }\r\n    \r\n    string readContentFromFile(string filePath) {\r\n        int p=0, p1=0;\r\n        file* cur=root;\r\n        while(p<filePath.size()) {\r\n            for(p1=p+1; p1<filePath.size() && filePath[p1]!='/'; ++p1);\r\n            string name=filePath.substr(p+1, p1-p-1);\r\n            if(!name.empty()) {\r\n                cur=cur->list[name];\r\n            }\r\n            p=p1;\r\n        }\r\n        return cur->content;\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * Your FileSystem object will be instantiated and called as such:\r\n * FileSystem obj = new FileSystem();\r\n * vector<string> param_1 = obj.ls(path);\r\n * obj.mkdir(path);\r\n * obj.addContentToFile(filePath,content);\r\n * string param_4 = obj.readContentFromFile(filePath);\r\n */"}
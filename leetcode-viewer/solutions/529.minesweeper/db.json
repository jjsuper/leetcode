{"c++":"class Solution {\r\npublic:\r\n    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {\r\n        int m=board.size();\r\n        int n=m? board[0].size(): 0;\r\n        \r\n        queue<vector<int>> q;\r\n        q.push(click);\r\n        \r\n        while(!q.empty()) {\r\n            vector<int> cur=q.front();\r\n            q.pop();\r\n            \r\n            if(board[cur[0]][cur[1]]=='M') {\r\n                board[cur[0]][cur[1]]='X';\r\n            }\r\n            else {\r\n                int Mcnt=0;\r\n                for(int i=max(0, cur[0]-1); i<min(m, cur[0]+2); ++i)\r\n                    for(int j=max(0, cur[1]-1); j<min(n, cur[1]+2); ++j) {\r\n                        if(board[i][j]=='M') Mcnt++;\r\n                    }\r\n            \r\n                if(Mcnt) board[cur[0]][cur[1]]=Mcnt+'0'; \r\n                else {\r\n                    board[cur[0]][cur[1]]='B';\r\n                    for(int i=max(0, cur[0]-1); i<min(m, cur[0]+2); ++i)\r\n                        for(int j=max(0, cur[1]-1); j<min(n, cur[1]+2); ++j) {\r\n                        if(board[i][j]=='E') {\r\n                            q.push(vector<int>{i, j});\r\n                            board[i][j]='B'; //memory limit\r\n                        }  \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        return board;\r\n    }\r\n};"}
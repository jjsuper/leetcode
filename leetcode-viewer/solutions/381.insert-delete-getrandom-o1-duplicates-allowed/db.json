{"c++":"class RandomizedCollection {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    RandomizedCollection() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\r\n    bool insert(int val) {\r\n        m[val].push(nums.size());\r\n        nums.push_back(val);\r\n        return m[val].size()==1;\r\n    }\r\n    \r\n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\r\n    bool remove(int val) {\r\n        if(m[val].size()==0) return false;\r\n        int idx = m[val].top();\r\n        m[val].pop();\r\n        if(idx != nums.size()-1) {\r\n            int tmp = nums.back();\r\n            nums[idx] = tmp;\r\n            m[tmp].pop();\r\n            m[tmp].push(idx);\r\n        }\r\n        nums.pop_back();\r\n        return true;\r\n    }\r\n    \r\n    /** Get a random element from the collection. */\r\n    int getRandom() {\r\n        return nums[rand()%nums.size()];\r\n    }\r\nprivate:\r\n    vector<int> nums;\r\n    unordered_map<int, priority_queue<int>> m;\r\n};\r\n\r\n/**\r\n * Your RandomizedCollection object will be instantiated and called as such:\r\n * RandomizedCollection obj = new RandomizedCollection();\r\n * bool param_1 = obj.insert(val);\r\n * bool param_2 = obj.remove(val);\r\n * int param_3 = obj.getRandom();\r\n */"}
{"c++":"class Solution {\r\npublic:\r\n    vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {\r\n        vector<int> res;\r\n        if(matrix.empty()) return res;\r\n        int m=matrix.size(), n=matrix[0].size();\r\n        /*\r\n        for(int i=0; i<m+n-1; ++i) {\r\n            if(i%2==0) {\r\n                for(int j=max(i,m-1); j>max(-1,i-n); --j) {\r\n                    int k=i-j;\r\n                    res.push_back(matrix[j][k]);\r\n                }\r\n            } \r\n            else {\r\n                for(int j=max(0,i-n+1); j<min(m-1,i+1); ++j) {\r\n                    int k=i-j;\r\n                    res.push_back(matrix[j][k]);\r\n                }\r\n            }\r\n        }*/\r\n        \r\n        vector<vector<int>> tmp(m+n-1);\r\n        for(int i=0; i<m+n-1; ++i) {\r\n            int row=max(0, i-n+1);\r\n            int col=min(i, n-1);\r\n            for( ; row<m && col>-1; row++, col--) {\r\n                tmp[i].push_back(matrix[row][col]);\r\n            }\r\n        }\r\n        \r\n        for(int i=0; i<tmp.size(); ++i) {\r\n            if(i%2) res.insert(res.end(), tmp[i].begin(), tmp[i].end());\r\n            else res.insert(res.end(), tmp[i].rbegin(), tmp[i].rend());\r\n        }\r\n    \r\n        return res;\r\n    }\r\n};"}
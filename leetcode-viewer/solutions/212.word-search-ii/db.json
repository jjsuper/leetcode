{"c++":"class Solution {\r\npublic:\r\n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\r\n        vector<string> res;\r\n        if(words.empty() || board.empty() || board[0].empty()) return res;\r\n        \r\n        buildTrie(words);\r\n        \r\n        for(int i=0; i<board.size(); ++i) {\r\n            for(int j=0; j<board[0].size(); ++j) {\r\n                dfs(board, i, j, root, res, words);\r\n            }\r\n        }\r\n        \r\n        return res;\r\n    }\r\n    \r\n    \r\nprivate:\r\n    class Trie{\r\n        public:\r\n            Trie* next[26];\r\n            bool is_leaf;\r\n            int idx;\r\n            Trie() {\r\n                is_leaf=false;\r\n                idx=0;\r\n                for(int i=0; i<26; ++i) next[i]=NULL;\r\n            }\r\n            ~Trie() {\r\n                for(int i=0; i<26; ++i) delete next[i];\r\n            }\r\n    };\r\n\r\n    Trie* root;\r\n \r\n    void buildTrie(vector<string>& words) {\r\n        root=new Trie();\r\n        for(int i=0; i<words.size(); ++i) {\r\n            Trie* p=root;\r\n            for(int j=0; j<words[i].size(); ++j) {\r\n                if(p->next[words[i][j]-'a']==NULL)\r\n                    p->next[words[i][j]-'a']=new Trie();\r\n                p=p->next[words[i][j]-'a'];\r\n            }\r\n            p->is_leaf=true;\r\n            p->idx=i;\r\n        }\r\n    }\r\n\r\n    void dfs(vector<vector<char>>& board, int i, int j, Trie* root, vector<string>& res, vector<string>& words) {\r\n        char tmp=board[i][j];\r\n        if(tmp=='X') return;\r\n        if(root->next[tmp-'a']==NULL) return;\r\n        \r\n        if(root->next[tmp-'a']->is_leaf) {\r\n            root->next[tmp-'a']->is_leaf=false;\r\n            res.push_back(words[root->next[tmp-'a']->idx]);\r\n        }\r\n        board[i][j]='X';    \r\n        \r\n        if(i>0) dfs(board, i-1, j, root->next[tmp-'a'], res, words);\r\n        if(j>0) dfs(board, i, j-1, root->next[tmp-'a'], res, words);  \r\n        if(i<board.size()-1) dfs(board, i+1, j, root->next[tmp-'a'], res, words);\r\n        if(j<board[0].size()-1) dfs(board, i, j+1, root->next[tmp-'a'], res, words); \r\n    \r\n        board[i][j]=tmp;\r\n    }\r\n\r\n\r\n\r\n\r\n};"}
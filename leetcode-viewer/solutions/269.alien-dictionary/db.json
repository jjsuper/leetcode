{"c++":"class Solution {\r\npublic:\r\n    string alienOrder(vector<string>& words) {\r\n        if(words.empty()) return \"\";\r\n        //if(words.size()==1) return words[0].substr(0,1);\r\n        int cnt_edge=0;\r\n        unordered_set<char> chars;\r\n        \r\n        for(int i=0; i<words.size()-1; ++i) {\r\n            chars.insert(words[i].begin(), words[i].end());\r\n            for(int j=0; j<words[i].size(); ++j) {\r\n                if(words[i][j]!=words[i+1][j]) {\r\n                    if(inedge.find(words[i][j])==inedge.end()) inedge[words[i][j]]=0;\r\n                    if(!outedge[words[i][j]].count(words[i+1][j])) {\r\n                        inedge[words[i+1][j]]++;\r\n                        outedge[words[i][j]].insert(words[i+1][j]);\r\n                        cnt_edge++;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }    \r\n        chars.insert(words[words.size()-1].begin(), words[words.size()-1].end());\r\n        \r\n        \r\n        //topological sort\r\n        string res;\r\n        queue<char> q;\r\n        \r\n        for(auto x: chars) {\r\n            cout << x << inedge[x] << endl;\r\n            if(inedge[x]==0) q.push(x);\r\n        }\r\n        \r\n        while(!q.empty()) {\r\n            char tmp=q.front();\r\n            q.pop();\r\n            res+=tmp;\r\n            cnt_edge-=outedge[tmp].size();\r\n            for(char c: outedge[tmp]) {\r\n                inedge[c]--;\r\n                if(inedge[c]==0) q.push(c);\r\n            }\r\n        }\r\n        \r\n        \r\n        return cnt_edge==0? res: \"\";\r\n    }\r\nprivate:\r\n    unordered_map<char, int> inedge;\r\n    unordered_map<char, unordered_set<char>> outedge;\r\n    \r\n};"}
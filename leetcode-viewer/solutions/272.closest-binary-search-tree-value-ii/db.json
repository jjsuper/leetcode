{"c++":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<int> closestKValues(TreeNode* root, double target, int k) {\r\n        stack<int> pred;\r\n        stack<int> succ;\r\n        inorder(root, target, false, pred);\r\n        inorder(root, target, true,  succ);\r\n        vector<int> res;\r\n        \r\n        while(k>0) {\r\n            if(pred.empty()) {\r\n                res.push_back(succ.top());\r\n                succ.pop();\r\n            }\r\n            else if(succ.empty()) {\r\n                res.push_back(pred.top());\r\n                pred.pop();\r\n            }\r\n            else {\r\n                double pred_diff=target-(double)pred.top();\r\n                double succ_diff=(double)succ.top()-target;\r\n                if(pred_diff<succ_diff) {\r\n                    res.push_back(pred.top());\r\n                    pred.pop();\r\n                }\r\n                else {\r\n                    res.push_back(succ.top());\r\n                    succ.pop();\r\n                }\r\n            }\r\n            k--;\r\n        }\r\n        \r\n        return res;\r\n    }\r\n    \r\n    \r\nprivate:\r\n    void inorder(TreeNode* root, double target, bool reverse, stack<int>& s) {\r\n        if(root==NULL) return;\r\n        inorder(reverse? root->right: root->left, target, reverse, s);\r\n        if((reverse && root->val<=target) || (!reverse && root->val>target)) return;\r\n        s.push(root->val);\r\n        inorder(reverse? root->left: root->right, target, reverse, s);\r\n    }\r\n};"}
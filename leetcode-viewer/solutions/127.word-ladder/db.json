{"c++":"class Solution {\r\npublic:\r\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\r\n        //unordered_set<string> words(wordList.begin(), wordList.end());\r\n        //words.insert(endWord);\r\n        vector<bool> visited(wordList.size(), 0);\r\n        queue<string> q;\r\n        \r\n        q.push(beginWord);\r\n        int dist=2;\r\n        \r\n        while(!q.empty()) {\r\n            int n=q.size();\r\n            \r\n            for(int i=0; i<n; ++i) {\r\n                string cur=q.front();\r\n                q.pop();\r\n                //cout << cur;\r\n                vector<string> next=findNext(cur, wordList, visited);\r\n                \r\n                for(int j=0; j<next.size(); ++j) {\r\n                    if(next[j]==endWord) return dist;\r\n                    q.push(next[j]);\r\n                }\r\n                \r\n            }\r\n            \r\n            dist++;\r\n            \r\n        }\r\n        \r\n        \r\n        \r\n        return 0;\r\n    }\r\n    \r\nprivate:\r\n    vector<string> findNext(string s, vector<string>& wordList, vector<bool>& visited) {\r\n        vector<string> res;\r\n        for(int i=0; i<wordList.size(); ++i) { \r\n            if(!visited[i]) {\r\n                int cnt=0;\r\n                for(int j=0; j<s.size(); ++j) {\r\n                    cnt+= (s[j]!=wordList[i][j]);\r\n                }\r\n                if(cnt==1) {\r\n                    visited[i]=1;\r\n                    res.push_back(wordList[i]);\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    \r\n};"}
{"c++":"class Solution {\r\npublic:\r\n    vector<string> removeInvalidParentheses(string s) {\r\n        int leftToRm=0, rightToRm=0;\r\n        unordered_set<string> res;\r\n        \r\n        for(char c:s) {\r\n            if(c=='(') leftToRm++;\r\n            if(c==')') {\r\n                if(leftToRm>0) leftToRm--;\r\n                else rightToRm++;\r\n            }\r\n        }\r\n        \r\n        helper(s, 0, leftToRm, rightToRm, 0, \"\", res);\r\n        \r\n        return vector<string>(res.begin(), res.end());\r\n    }\r\nprivate:\r\n    void helper(string s, int index, int leftToRm, int rightToRm, int pair, string path, unordered_set<string>& res) {\r\n        if(index==s.size()) {\r\n            if(leftToRm==0 && rightToRm==0 && pair==0) \r\n                res.insert(path);\r\n            return;\r\n        }\r\n        \r\n        if(s[index]!='(' && s[index]!=')') \r\n            helper(s, index+1, leftToRm, rightToRm, pair, path+s[index], res);\r\n        else if(s[index]=='(') {\r\n            if(leftToRm>0) helper(s, index+1, leftToRm-1, rightToRm, pair, path, res);\r\n            helper(s, index+1, leftToRm, rightToRm, pair+1, path+s[index], res);\r\n        }\r\n        else {\r\n            if(rightToRm>0) helper(s, index+1, leftToRm, rightToRm-1, pair, path, res);\r\n            if(pair>0) helper(s, index+1, leftToRm, rightToRm, pair-1, path+s[index], res);\r\n        }\r\n    }\r\n};"}
{"c++":"class AllOne {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    AllOne() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\r\n    void inc(string key) {\r\n        if(m.count(key)) {\r\n            auto curBucket=m[key], nextBucket=++m[key];\r\n            if(nextBucket==buckets.end()) {\r\n                Bucket newBucket(curBucket->val+1, key);\r\n                buckets.push_back(newBucket);\r\n                m[key] = --buckets.end();\r\n            }\r\n            else if (nextBucket->val != curBucket->val+1) {\r\n                Bucket newBucket(curBucket->val+1, key);\r\n                m[key] = buckets.insert(nextBucket, newBucket);\r\n            }\r\n            else {\r\n                nextBucket->keys.insert(key);\r\n                m[key] = nextBucket;\r\n            }\r\n            curBucket->keys.erase(key);\r\n            if(curBucket->keys.empty()) buckets.erase(curBucket);\r\n        }\r\n        else {\r\n            if(buckets.empty() || buckets.front().val != 1) {\r\n                Bucket newBucket(1, key);\r\n                buckets.push_front(newBucket);\r\n            }\r\n            else \r\n                buckets.front().keys.insert(key);\r\n\r\n            m[key] = buckets.begin();\r\n        }\r\n        //dumpList();\r\n       //dump();\r\n    }\r\n    \r\n    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\r\n    void dec(string key) {\r\n        if(!m.count(key)) return;\r\n        auto curBucket=m[key];\r\n        if(curBucket->val == 1) {\r\n            curBucket->keys.erase(key);\r\n            if(curBucket->keys.empty()) buckets.erase(curBucket);\r\n            m.erase(key);\r\n            return;\r\n        }\r\n        auto preBucket = --m[key];\r\n        if(curBucket == buckets.begin()) {\r\n            Bucket newBucket(curBucket->val-1, key);\r\n            buckets.push_front(newBucket);\r\n            m[key]=buckets.begin();\r\n        }\r\n        else if (curBucket->val != preBucket->val+1) {\r\n            cout << \"in\" << endl;\r\n            Bucket newBucket(curBucket->val-1, key);\r\n            m[key] = buckets.insert(curBucket, newBucket);\r\n        }\r\n        else {\r\n            preBucket->keys.insert(key);\r\n            m[key]=preBucket;\r\n        }\r\n        \r\n        \r\n        curBucket->keys.erase(key);\r\n        if(curBucket->keys.empty()) buckets.erase(curBucket);\r\n        dumpList();\r\n        //cout << \"dec\";\r\n        //dump();\r\n    }\r\n    \r\n    /** Returns one of the keys with maximal value. */\r\n    string getMaxKey() {\r\n        return buckets.empty()? \"\": *(buckets.back().keys.begin());\r\n    }\r\n    \r\n    /** Returns one of the keys with Minimal value. */\r\n    string getMinKey() {\r\n        return buckets.empty()? \"\": *(buckets.front().keys.begin());\r\n    }\r\nprivate:\r\n    struct Bucket {\r\n        int val; unordered_set<string> keys;\r\n        Bucket(int v, string s) {\r\n            val=v;\r\n            keys.insert(s);\r\n        }\r\n    };\r\n    list<Bucket> buckets;\r\n    unordered_map<string, list<Bucket>::iterator> m;\r\n    \r\n    void dump() {\r\n        for(auto it : m) {\r\n            cout << it.first << \" \" << it.second->val << endl; \r\n        }\r\n        \r\n        cout << endl << endl;\r\n    }\r\n    \r\n    void dumpList() {\r\n        for(auto b : buckets) {\r\n            cout << b.val << \" \";\r\n            for(auto key: b.keys) {\r\n                cout << key << \" \";\r\n            }\r\n        }\r\n        cout << endl << endl;\r\n    }\r\n    \r\n};\r\n\r\n/**\r\n * Your AllOne object will be instantiated and called as such:\r\n * AllOne obj = new AllOne();\r\n * obj.inc(key);\r\n * obj.dec(key);\r\n * string param_3 = obj.getMaxKey();\r\n * string param_4 = obj.getMinKey();\r\n */"}
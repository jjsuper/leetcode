{"c++":"class Solution {\r\npublic:\r\n    int shortestDistance(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {\r\n        int m=maze.size();\r\n        int n=m? maze[0].size(): 0;\r\n        \r\n        vector<vector<int>> dists(m, vector<int>(n, -1));\r\n        vector<vector<int>> dir={{-1,0}, {1,0}, {0,-1}, {0,1}};\r\n        queue<vector<int>> q;\r\n        \r\n        q.push(start);\r\n        dists[start[0]][start[1]]=0;\r\n        \r\n        while(!q.empty()) {\r\n            int x=q.front()[0], y=q.front()[1];\r\n            int dist=dists[x][y];\r\n            q.pop();\r\n            \r\n            //cout << x << \" \" << y << endl;\r\n            \r\n            for(int k=0; k<4; ++k) {\r\n                int i=x, j=y;\r\n                int step=0;\r\n                int d_i=dir[k][0], d_j=dir[k][1];\r\n                //cout << \"i=\" << i << \"j=\" << j << endl;\r\n                \r\n                while(d_i+i>-1 && d_i+i<m && d_j+j>-1 && d_j+j<n && maze[d_i+i][d_j+j]==0) {\r\n                    step++;\r\n                    i+=d_i;\r\n                    j+=d_j;\r\n                }\r\n                // cout << \"queue\" << x << \" \" << y << endl;\r\n                if(dists[i][j]==-1) {\r\n                    dists[i][j]=dist+step;\r\n                    q.push(vector<int>{i, j});\r\n                }\r\n                else if(dists[i][j]>dist+step) {\r\n                    dists[i][j]=dist+step;\r\n                    q.push(vector<int>{i, j});\r\n                }\r\n            }\r\n        }\r\n \r\n        return dists[destination[0]][destination[1]];\r\n    }\r\n};"}
{"c++":"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n *     Interval() : start(0), end(0) {}\r\n *     Interval(int s, int e) : start(s), end(e) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<Interval> merge(vector<Interval>& intervals) {\r\n        vector<Interval> res;\r\n        if(intervals.empty()) return res;\r\n        sort(intervals.begin(), intervals.end(), [](Interval a, Interval b){return a.start<b.start || (a.start==b.start && a.end<b.end);});\r\n        \r\n        res.push_back(intervals[0]);\r\n        for(int i=1; i<intervals.size(); ++i) {\r\n            if(intervals[i].start<=res.back().end) {\r\n                res.back().end=max(res.back().end, intervals[i].end);\r\n            }\r\n            else {\r\n                res.push_back(intervals[i]);\r\n            }\r\n        }\r\n        \r\n        return res;\r\n    }\r\n};"}
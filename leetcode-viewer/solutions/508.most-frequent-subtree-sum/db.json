{"c++":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<int> findFrequentTreeSum(TreeNode* root) {\r\n        vector<int> res;\r\n        map<int, int> treesum; \r\n        int maxsum=0;\r\n        findSum(root, treesum, maxsum);\r\n        \r\n        \r\n        for(auto it=treesum.begin(); it!=treesum.end(); ++it) {\r\n            if(it->second==maxsum) res.push_back(it->first);\r\n        }\r\n        \r\n        return res;\r\n    }\r\nprivate:\r\n    int findSum(TreeNode*& root, map<int, int>& treesum, int& maxsum) {\r\n        if(root==NULL) return 0;\r\n        \r\n        int sum=root->val;\r\n        \r\n        sum+=findSum(root->left, treesum, maxsum);\r\n        sum+=findSum(root->right, treesum, maxsum);\r\n        \r\n        treesum[sum]++;\r\n        maxsum=max(treesum[sum], maxsum);\r\n        \r\n        return sum;\r\n    }\r\n};"}
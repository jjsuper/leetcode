{"c++":"class Solution {\r\npublic:\r\n/*\r\n    int minCut(string s) {\r\n        if(s.empty()) return 0;\r\n        return helper(s, 0, -1);\r\n    }    \r\n        \r\nprivate:\r\n    int helper(string s, int index, int num) {\r\n        if(index==s.size()) {\r\n            return num;    \r\n        }\r\n        \r\n        for(int i=index; i<s.size(); ++i) \r\n            if(isPalindrome(s.substr(index, i-index+1))) \r\n                if(num==-1) num=helper(s, i+1, num+1);\r\n                else num=min(num, helper(s, i+1, num+1));\r\n        \r\n        return num;\r\n    }\r\n    \r\n    bool isPalindrome(string s) {\r\n        if(s.empty()) return true;\r\n        for(int i=0; i<s.size()/2; ++i) {\r\n            if(s[i]!=s[s.size()-i-1]) return false;\r\n        }\r\n        return true;\r\n    }    */\r\n    \r\n    int minCut(string s) {\r\n        int n = s.size();\r\n        vector<int> cut(n+1, 0);  // number of cuts for the first k characters\r\n        for (int i = 0; i <= n; i++) cut[i] = i-1;\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; i-j >= 0 && i+j < n && s[i-j]==s[i+j] ; j++) // odd length palindrome\r\n                cut[i+j+1] = min(cut[i+j+1],1+cut[i-j]);\r\n\r\n            for (int j = 1; i-j+1 >= 0 && i+j < n && s[i-j+1] == s[i+j]; j++) // even length palindrome\r\n                cut[i+j+1] = min(cut[i+j+1],1+cut[i-j+1]);\r\n        }\r\n        return cut[n];\r\n    }\r\n    \r\n};"}
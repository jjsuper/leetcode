{"c++":"class WordDictionary {\r\n    \r\nclass TrieNode {\r\npublic:\r\n    TrieNode* next[26];\r\n    bool is_end=false;\r\n};\r\n    \r\npublic:\r\n    /** Initialize your data structure here. */\r\n    WordDictionary() {\r\n        root=new TrieNode();\r\n    }\r\n    \r\n    /** Adds a word into the data structure. */\r\n    void addWord(string word) {\r\n        TrieNode* p=root;\r\n        for(int i=0; i<word.size(); ++i) {\r\n            if(p->next[word[i]-'a']==NULL) {\r\n                p->next[word[i]-'a']=new TrieNode();\r\n            }\r\n            p=p->next[word[i]-'a'];\r\n        }\r\n        p->is_end=true;\r\n    }\r\n    \r\n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\r\n    bool search(string word) {\r\n        return search(word, root);\r\n    }\r\nprivate:\r\n    TrieNode* root;\r\n    \r\n    bool search(string word, TrieNode* root) {\r\n        TrieNode* p=root;\r\n        for(int i=0; i<word.size() && p!=NULL; ++i) {\r\n            if(word[i]=='.') {\r\n                for(int j=0; j<26; ++j) {\r\n                    if(search(word.substr(i+1), p->next[j])) return true;\r\n                }\r\n                p=p->next[0];\r\n            }\r\n            else {\r\n                p=p->next[word[i]-'a'];\r\n            }\r\n        }\r\n        return p!=NULL && p->is_end;\r\n    }\r\n};\r\n\r\n/**\r\n * Your WordDictionary object will be instantiated and called as such:\r\n * WordDictionary obj = new WordDictionary();\r\n * obj.addWord(word);\r\n * bool param_2 = obj.search(word);\r\n */"}
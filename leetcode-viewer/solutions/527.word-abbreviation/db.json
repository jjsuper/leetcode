{"c++":"class Solution {\r\npublic:\r\n    vector<string> wordsAbbreviation(vector<string>& dict) {\r\n        unordered_map<string, unordered_set<string>> abbr2word;\r\n        unordered_map<string, string> word2abbr;\r\n        \r\n        for(string word : dict) {\r\n            if(word.size()<4) {\r\n                word2abbr[word]=word;\r\n            }\r\n            else {\r\n                string abbr = word[0]+to_string(word.size()-2)+word[word.size()-1];\r\n                abbr2word[abbr].insert(word);\r\n                word2abbr[word]=abbr;\r\n            }\r\n        }\r\n        \r\n        for(auto it : abbr2word) {\r\n            if(it.second.size()>1) {\r\n                unordered_map<string, unordered_set<string>> newabbr2word;\r\n                unordered_set<string> needfix=it.second;\r\n                int len=(*it.second.begin()).size();\r\n                \r\n                for(int i=2; i<=len && !needfix.empty(); ++i) {\r\n                    if(i==len-2) {\r\n                        for(string word : needfix) {\r\n                            word2abbr[word]=word;\r\n                        }\r\n                        break;\r\n                    }\r\n                    \r\n                    for(string word : needfix) {\r\n                        string newabbr = word.substr(0, i) + to_string(len-i-1) + word[word.size()-1];\r\n                        newabbr2word[newabbr].insert(word);\r\n                    }\r\n                    \r\n                    needfix.clear();\r\n                    for(auto newit : newabbr2word) {\r\n                        if(newit.second.size()>1) {\r\n                            for(string word : newit.second) {\r\n                                needfix.insert(word);\r\n                            }\r\n                        }\r\n                        else {\r\n                            word2abbr[*newit.second.begin()]=newit.first;\r\n                        }\r\n                    }\r\n                    newabbr2word.clear();\r\n                    \r\n                }\r\n            }\r\n        }\r\n        \r\n        \r\n        \r\n        vector<string> res;\r\n        for(string word : dict) {\r\n            res.push_back(word2abbr[word]);\r\n        }\r\n        return res;\r\n    }\r\n};"}
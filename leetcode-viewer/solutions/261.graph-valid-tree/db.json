{"c++":"class Solution {\r\npublic:\r\n    bool validTree(int n, vector<pair<int, int>>& edges) {\r\n        /*\r\n\r\n Input: 4\r\n[[0,1],[2,3],[1,2]]\r\nOutput: false\r\nExpected: true \r\n        unordered_set<int> num;\r\n        for(int i=0; i<n; ++i)\r\n            num.insert(i);\r\n        for(int i=0; i<edges.size(); ++i) {\r\n            if(num.find(edges[i].first)==num.end() && num.find(edges[i].second)==num.end()) return false;\r\n            if(num.find(edges[i].first)!=num.end()) num.erase(edges[i].first);\r\n            if(num.find(edges[i].second)!=num.end()) num.erase(edges[i].second);\r\n        }\r\n        return edges.size()==n-1;\r\n        */\r\n        \r\n        vector<int> node(n, 0);\r\n        for(int i=0; i<n; ++i) node[i]=i; \r\n        for(int i=0; i<edges.size(); ++i) {\r\n            int f=edges[i].first;\r\n            int s=edges[i].second;\r\n            while(node[f]!=f) f=node[f];\r\n            while(node[s]!=s) s=node[s];\r\n            if(f==s) return false;\r\n            node[s]=f;\r\n        }\r\n        return edges.size()==n-1;\r\n        \r\n    }\r\n};"}
{"c++":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\r\n        stack<vector<int>> outstack;\r\n        vector<vector<int>> outvector;\r\n        queue<TreeNode*> queue1;\r\n        queue<TreeNode*> queue2;\r\n        \r\n        if (root==NULL) return outvector;\r\n        \r\n        queue1.push(root);\r\n        \r\n        while(!queue1.empty()||!queue2.empty())\r\n        {\r\n            vector<int> vec;\r\n            while(!queue1.empty())\r\n            {\r\n                TreeNode* node;\r\n                node=queue1.front();\r\n                queue1.pop();\r\n                if(node->left!=NULL) queue2.push(node->left);\r\n                if(node->right!=NULL) queue2.push(node->right);\r\n                vec.push_back(node->val);\r\n            }\r\n            \r\n            outstack.push(vec);\r\n            swap(queue1,queue2);\r\n            \r\n        }\r\n        \r\n        \r\n        \r\n        while(!outstack.empty())\r\n        {\r\n            outvector.push_back(outstack.top());\r\n            outstack.pop();\r\n        }\r\n        \r\n        return outvector;\r\n    }\r\n};"}
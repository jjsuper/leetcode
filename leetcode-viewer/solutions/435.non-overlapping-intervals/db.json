{"c++":"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n *     Interval() : start(0), end(0) {}\r\n *     Interval(int s, int e) : start(s), end(e) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int eraseOverlapIntervals(vector<Interval>& intervals) {\r\n        if(intervals.empty()) return 0;\r\n        \r\n        sort(intervals.begin(),intervals.end(),[](Interval& i1, Interval& i2){\r\n           return i1.start<i2.start || (i1.start==i2.start && i1.end<i2.end);\r\n        });\r\n        \r\n        int cnt=0;\r\n        for(int i=1; i<intervals.size(); ++i) {\r\n            if(intervals[i].start < intervals[i-1].end){\r\n                cnt++;\r\n                intervals[i].end = min(intervals[i].end, intervals[i-1].end);\r\n            }\r\n        }\r\n        \r\n        return cnt;\r\n    }\r\n};"}
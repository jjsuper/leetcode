{"c++":"/**\r\n * // This is the interface that allows for creating nested lists.\r\n * // You should not implement it, or speculate about its implementation\r\n * class NestedInteger {\r\n *   public:\r\n *     // Constructor initializes an empty nested list.\r\n *     NestedInteger();\r\n *\r\n *     // Constructor initializes a single integer.\r\n *     NestedInteger(int value);\r\n *\r\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\r\n *     bool isInteger() const;\r\n *\r\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\r\n *     // The result is undefined if this NestedInteger holds a nested list\r\n *     int getInteger() const;\r\n *\r\n *     // Set this NestedInteger to hold a single integer.\r\n *     void setInteger(int value);\r\n *\r\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\r\n *     void add(const NestedInteger &ni);\r\n *\r\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\r\n *     // The result is undefined if this NestedInteger holds a single integer\r\n *     const vector<NestedInteger> &getList() const;\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    NestedInteger deserialize(string s) {\r\n        istringstream in(s);\r\n        return deserialize(in);\r\n    }\r\nprivate:\r\n    NestedInteger deserialize(istringstream &in) {\r\n        int num;\r\n        if(in>>num)\r\n            return NestedInteger(num);\r\n        in.clear();\r\n        in.get();\r\n        NestedInteger list;\r\n        while(in.peek()!=']') {\r\n            list.add(deserialize(in));\r\n            if(in.peek()==',') in.get();\r\n        }\r\n        in.get();\r\n        return list;\r\n    }\r\n};"}